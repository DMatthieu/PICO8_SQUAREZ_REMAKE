pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
	init_general_vars()
	init_gold_data()
	init_gsqr_data()
	init_player_data()
	init_rsqr_data()
	init_map_data()
end

function _update()
	
	
	if not square.dead then
		update_player()
		update_gold()	
		update_gsqr()	
		update_rsqr()
		
	else
		
		game_over_bhvr()	
	end
		
end

function _draw()
	cls()
	
	--arena bcg
	draw_arena()
	
	--draw player
	

	--draw gold sprites
	if not square.dead then
		draw_gold(golds)
		draw_gsqr(gsqrs)
		draw_rsqr(rsqrs)
		draw_player()
	else
		game_over_disp()
			
	end
	
	
	--draw score
	print("score: "..score,4,0,10)
	
	--debug zone *******
	
	
	
	
end
-->8
--player 


--var zone
function init_player_data()
	square={}
		square.x=60
		square.y=60
		square.w=8
		square.h=8
		square.spr=32
		square.spd=2
		square.berserk=false		
		square.dead=false		
end

--update zone
function update_player()
	player_move()
	check_berserk()
end

function draw_player()
	if not square.dead then
		spr(square.spr,
						square.x,
						square.y)
	end					
end

function player_move()
	--player controls
	
	
	if (btn(0)) then--left 	
		for i=1,square.spd do		
  	newx = square.x-1					
			newy = square.y
  	
  	if (can_move(flr(newx/8),flr(newy/8)))
				and (can_move(flr(newx/8),flr((newy+7)/8))) then
					square.x-=1
					
			end		
		end		
	end	
	
	if (btn(1)) then--right 
		for i=1,square.spd do		
  	newx = square.x+1					
			newy = square.y
  	
  	if (can_move(flr((newx+7)/8),flr(newy/8)))
				and (can_move(flr((newx+7)/8),flr((newy+7)/8))) then
					square.x+=1
					
			end		
		end		
	end
	
	if (btn(2)) then--up 
		for i=1,square.spd do		
  	newx = square.x					
			newy = square.y-1
  	
  	if (can_move(flr(newx/8),flr(newy/8)))
				and (can_move(flr((newx+7)/8),flr(newy/8))) then
					
					square.y-=1
			end		
		end	
	end
	
	if (btn(3)) then--down 
		
		----------------
		for i=1,square.spd do		
  	newx = square.x					
			newy = square.y+1
  	
  	if (can_move(flr(newx/8),flr((newy+7)/8)))
				and (can_move(flr((newx+7)/8),flr((newy+7)/8))) then
					square.y+=1
			end		
		end	
	end
	
	return can_move(newx,newy)
end

function check_berserk()
	if square.berserk==true then
		timer+=1/30
		if timer <= berserk_duration then
			square.spr=33
			sfx(2)
		else
			square.berserk=false
			timer=0
			square.spr=32
		end
	end	
end
-->8
--gold

function init_gold_data()
	golds={}
	add_golds(15)	
end

function add_golds(nbgold)
	for i=1,nbgold do 
	  create_gold_obj() 
 end 
end

function create_gold_obj()	
	gold={}		
		 gold.x =0
			gold.y =0
				
			while (not is_spawnable(flr(gold.x/8),flr(gold.y/8)) or
										not is_spawnable(flr((gold.x+7)/8),flr(gold.y/8)) or
										not is_spawnable(flr((gold.x+7)/8),flr((gold.y+7)/8)) or
										not is_spawnable(flr(gold.x/8),flr((gold.y+7)/8))) do
		
				gold.x =flr(rnd(108)+6)
				gold.y =flr(rnd(108)+6)
			end
							
			gold.w = 8
			gold.h = 8
			gold.smin = 16--min spr
			gold.smax = 21--max spr
			gold.spr = 16	
		add(golds,gold)		
end

function touched_by_player(golds)
	foreach(golds,
		function(gold)
			--params tweaked for 
			--pixel perfect collision
			local hit =box_hit(
														gold.x+1,
														gold.y+1,
														gold.w-3,
														gold.h-3,
														square.x,
														square.y,
														square.w,
														square.h)
			if hit==true then
				score+=gcoin_pts
				sfx(0)
				del(golds, gold)
			end											
		end
	)	
end

function update_gold()
	animate_sprite(golds,0.5)
	touched_by_player(golds)
end

function draw_gold(golds)
--golds = array
--g = occurency of array
	foreach(golds,function(g)
		spr(g.spr,g.x,g.y)
		end
	)
end

-->8
--map functions

function init_map_data()
	wall=0
end


function draw_arena()
	map(0,0,0,0,16,16)
end

function is_tile(tile_type,x,y)
	tile = mget(x,y)
	has_flag=fget(tile,tile_type)
	return has_flag
end

function can_move(x,y)
	return not is_tile(wall,x,y)
end

function is_spawnable(x,y)
	return not is_tile(wall,x,y)
end
-->8
--g.p.f
--general purpose functions

function init_general_vars()
	score=0
	timer=0
	gcoin_pts=10
	berserk_duration = 3	
end

function animate_sprite(sprites,speed_a)
	foreach(sprites,
		function(s)
			s.spr+=speed_a
			if s.spr>s.smax then
				s.spr=s.smin
			end
		end
	)
end

function box_hit(
	x1,y1,
	w1,h1,
	x2,y2,
	w2,h2)

	local hit=false
	
	local xs=w1*0.5+w2*0.5
	local ys=h1*0.5+h2*0.5
	local xd=abs((x1+(w1/2))-(x2+(w2/2)))
	local yd=abs((y1+(h1/2))-(y2+(h2/2)))

	if xd<xs and yd<ys then
		hit=true
	end	

	return hit

end
-->8
--green squares

function init_gsqr_data()
	gsqrs={}
	add_gsqrs(1)	
end

function add_gsqrs(nbgsqr)
	for i=1,nbgsqr do 
	  create_gsqr_obj() 
 end 
end

function create_gsqr_obj()

	gsqr={}		
		 gsqr.x =0
			gsqr.y =0
				
			while (not is_spawnable(flr(gsqr.x/8),flr(gsqr.y/8)) or
										not is_spawnable(flr((gsqr.x+7)/8),flr(gsqr.y/8)) or
										not is_spawnable(flr((gsqr.x+7)/8),flr((gsqr.y+7)/8)) or
										not is_spawnable(flr(gsqr.x/8),flr((gsqr.y+7)/8))) do
		
				gsqr.x =flr(rnd(108)+6)
				gsqr.y =flr(rnd(108)+6)
			end
							
			gsqr.w = 8
			gsqr.h = 8
			gsqr.smin = 22--min spr
			gsqr.smax = 25--max spr
			gsqr.spr = 22
		add(gsqrs,gsqr)
end

function check_gsqr_collected(gsqrs)
	foreach(gsqrs,
		function(gsqr)
			--params tweaked for 
			--pixel perfect collision
			local hit =box_hit(
														gsqr.x+1,
														gsqr.y+1,
														gsqr.w-3,
														gsqr.h-3,
														square.x,
														square.y,
														square.w,
														square.h)
			if hit==true then			
				sfx(1)
				del(gsqrs, gsqr)
				square.berserk=true
			end											
		end
	)	
end

function update_gsqr()
	animate_sprite(gsqrs,0.5)
	check_gsqr_collected(gsqrs)
end

function draw_gsqr(gsqrs)
--golds = array
--g = occurency of array
	foreach(gsqrs,function(g)
		spr(g.spr,g.x,g.y)
		end
	)
end

-->8
--red squares 1

function init_rsqr_data()
	rsqrs={}
	add_rsqrs(1)	
end

function add_rsqrs(nbrsqr)
	for i=1,nbrsqr do 
	  create_rsqr_obj() 
 end 
end

function create_rsqr_obj()
	rsqr={}		
		 rsqr.x =0
			rsqr.y =0
				
			while (not is_spawnable(flr(rsqr.x/8),flr(rsqr.y/8)) or
										not is_spawnable(flr((rsqr.x+7)/8),flr(rsqr.y/8)) or
										not is_spawnable(flr((rsqr.x+7)/8),flr((rsqr.y+7)/8)) or
										not is_spawnable(flr(rsqr.x/8),flr((rsqr.y+7)/8))) do
		
				rsqr.x =flr(rnd(108)+6)
				rsqr.y =flr(rnd(108)+6)
			end
							
			rsqr.w = 8
			rsqr.h = 8
			rsqr.smin = 1--min spr
			rsqr.smax = 1--max spr
			rsqr.spr = 1
		add(rsqrs,rsqr)

end

function check_rsqr_collected(rsqrs)
	foreach(rsqrs,
		function(rsqr)
			--params tweaked for 
			--pixel perfect collision
			local hit =box_hit(
														rsqr.x+1,
														rsqr.y+1,
														rsqr.w-3,
														rsqr.h-3,
														square.x,
														square.y,
														square.w,
														square.h)
			if hit==true then			
				if square.berserk then
					del(rsqrs, rsqr)
				else
					square.dead=true
					sfx(4)
				end
			end											
		end
	)	
end

function update_rsqr()
	animate_sprite(rsqrs,0.5)
	check_rsqr_collected(rsqrs)
end

function draw_rsqr(rsqrs)

	foreach(rsqrs,function(r)
		spr(r.spr,r.x,r.y)
		end
	)
end

-->8
--game states
function game_over_bhvr()
	if (btn(5)) then
		reset_game()
	end
end

function game_over_disp()
	rectfill(9,50,118,77,0)
	line(9,50,118,50,7)
	line(9,77,118,77,7)
	line(9,50,9,76,7)
	line(118,50,118,76,7)
	
	--print game over 
	--et press x to reset
	print("game over!",46,53,8)
	print("press x to restart",29,61,7)
	--spr(16,60,68)
end

function reset_game()
 
 _init()
	 
end
__gfx__
00000000000000008888888888888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021111112
00000000088888808222222882222228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002111120
007007000822228082bbbb2882222228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222200
000770000822228082b22b2882299228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222200
000770000822228082b22b2882299228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222200
007007000822228082bbbb2882222228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222200
00000000088888808222222882222228000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000010
00000000000000008888888888888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077777776
0999999000999990009999000009900000999900009999900bbbbbb0000bbb000000bb00000bbb00000000000000000000000000000000000000000076666665
09aaaa900099aa900099a90000099000009a9900009aa9900b3333b00bb33b000bbb3b000bb33b00000000000000000000000000000000000000000076666665
09aaaa900099aa900099a90000099000009a9900009aa9900b3333b00b3333b00b333b000b3333b0000000000000000000000000000000000000000076666665
09aaaa900099aa900099a90000099000009a9900009aa9900b3333b00b3333b000b333b00b3333b0000000000000000000000000000000000000000076666665
09aaaa900099aa900099a90000099000009a9900009aa9900b3333b000b33bb000b3bbb000b33bb0000000000000000000000000000000000000000076666665
0999999000999990009999000009900000999900009999900bbbbbb000bbb00000bb000000bbb000000000000000000000000000000000000000000076666665
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065555555
ccccccccdddddddda999999aa999999a00000000000000000000000000000000000000000000000000000000000000000000000000000000555555551dddddd5
c111111cd222222d9a4444a99a4444a90000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
c111111cd222222d94a44a49944444490000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
c111111cd222222d94488449944aa4490000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
c111111cd222222d94488449944aa4490000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
c111111cd222222d94a44a49944444490000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
c111111cd222222d9a4444a99a4444a90000000000000000000000000000000000000000000000000000000000000000000000000000000055555555d1111110
ccccccccdddddddda999999aa999999a000000000000000000000000000000000000000000000000000000000000000000000000000000005555555550000001
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000777555555555555555555776
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000765555555555555555555576
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000755555555555555555555556
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000755555555555555555555556
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000755555555555555555555556
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000755555555555555555555556
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000766666666666666666666665
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000655555555555555555555555
__gff__
0000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000000001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3d3e3e3e3e3e3e3e3e3e3e3e3e3e3e3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00001f1f1f1f1f1f1f1f1f1f00001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f00000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100002d3702d370393703937039350393503c3003d3003d3003d30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00050000140500d050080500b050140500d0500805000770007500075000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0001000003050040500505006050090500b0500705000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
